// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SriTel.Models;

#nullable disable

namespace SriTel.Migrations
{
    [DbContext(typeof(SriTelContext))]
    partial class SriTelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("SriTel.Models.AddOn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddOnId")
                        .HasColumnType("bigint");

                    b.Property<float>("ChargePerGb")
                        .HasColumnType("real");

                    b.Property<float>("DataAmount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ValidNoOfDays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddOnId");

                    b.ToTable("AddOn");
                });

            modelBuilder.Entity("SriTel.Models.AddOnActivation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActivatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("AddOnId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataServiceId")
                        .HasColumnType("bigint");

                    b.Property<float>("DataUsage")
                        .HasColumnType("real");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AddOnActivation");
                });

            modelBuilder.Entity("SriTel.Models.Bill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long?>("BillId")
                        .HasColumnType("bigint");

                    b.Property<float>("DueAmount")
                        .HasColumnType("real");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<float>("TaxAmount")
                        .HasColumnType("real");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("SriTel.Models.DataService", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("ServiceId"));

                    b.Property<float>("DataRoamingCharge")
                        .HasColumnType("real");

                    b.Property<int>("IsDataRoaming")
                        .HasColumnType("integer");

                    b.HasKey("ServiceId");

                    b.ToTable("DataService");
                });

            modelBuilder.Entity("SriTel.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SriTel.Models.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<int>("AnyNetCallMins")
                        .HasColumnType("integer");

                    b.Property<int>("AnyNetSmsCount")
                        .HasColumnType("integer");

                    b.Property<float>("AnytimeDate")
                        .HasColumnType("real");

                    b.Property<float>("Charge")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("OffPeekData")
                        .HasColumnType("real");

                    b.Property<float>("PeekData")
                        .HasColumnType("real");

                    b.Property<string>("Renewal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("S2SCallMins")
                        .HasColumnType("integer");

                    b.Property<int>("S2SSmsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("SriTel.Models.PackageUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<int>("AnyNetCallMinsUsage")
                        .HasColumnType("integer");

                    b.Property<int>("AnyNetSmsCountUsage")
                        .HasColumnType("integer");

                    b.Property<float>("AnytimeDateUsage")
                        .HasColumnType("real");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<float>("OffPeekDataUsage")
                        .HasColumnType("real");

                    b.Property<long>("PackageId")
                        .HasColumnType("bigint");

                    b.Property<float>("PeekDataUsage")
                        .HasColumnType("real");

                    b.Property<int>("S2SCallMinsUsage")
                        .HasColumnType("integer");

                    b.Property<int>("S2SSmsCountUsage")
                        .HasColumnType("integer");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PackageUsage");
                });

            modelBuilder.Entity("SriTel.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("BillId")
                        .HasColumnType("bigint");

                    b.Property<float>("PayAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("PayDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("SriTel.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<float>("Charge")
                        .HasColumnType("real");

                    b.Property<long?>("DataServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("SriTel.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("PastPassword")
                        .HasColumnType("text[]");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SriTel.Models.VoiceService", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("ServiceId"));

                    b.Property<bool>("IsRinginngTone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVoiceRoaming")
                        .HasColumnType("boolean");

                    b.Property<float>("RingingToneCharge")
                        .HasColumnType("real");

                    b.Property<string>("RingingToneName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("VoiceRoamingCharge")
                        .HasColumnType("real");

                    b.HasKey("ServiceId");

                    b.ToTable("VoiceService");
                });

            modelBuilder.Entity("SriTel.Models.AddOn", b =>
                {
                    b.HasOne("SriTel.Models.AddOnActivation", null)
                        .WithMany("AddOnActivation_AddOn")
                        .HasForeignKey("AddOnId");
                });

            modelBuilder.Entity("SriTel.Models.Bill", b =>
                {
                    b.HasOne("SriTel.Models.Payment", null)
                        .WithMany("Payment_Bill")
                        .HasForeignKey("BillId");
                });

            modelBuilder.Entity("SriTel.Models.Service", b =>
                {
                    b.HasOne("SriTel.Models.AddOnActivation", null)
                        .WithMany("AddOnActivation_Service")
                        .HasForeignKey("DataServiceId");

                    b.HasOne("SriTel.Models.Bill", null)
                        .WithMany("Bill_Service")
                        .HasForeignKey("ServiceId");

                    b.HasOne("SriTel.Models.PackageUsage", null)
                        .WithMany("PackageUsage_Service")
                        .HasForeignKey("ServiceId");

                    b.HasOne("SriTel.Models.Payment", null)
                        .WithMany("Payment_Service")
                        .HasForeignKey("ServiceId");

                    b.HasOne("SriTel.Models.DataService", null)
                        .WithMany("DataService_Service")
                        .HasForeignKey("ServiceId");

                    b.HasOne("SriTel.Models.VoiceService", null)
                        .WithMany("VoiceService_Service")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("SriTel.Models.User", b =>
                {
                    b.HasOne("SriTel.Models.AddOnActivation", null)
                        .WithMany("AddOnActivation_User")
                        .HasForeignKey("UserId");

                    b.HasOne("SriTel.Models.Bill", null)
                        .WithMany("Bill_User")
                        .HasForeignKey("UserId");

                    b.HasOne("SriTel.Models.Notification", null)
                        .WithMany("Notification_User")
                        .HasForeignKey("UserId");

                    b.HasOne("SriTel.Models.PackageUsage", null)
                        .WithMany("PackageUsage_User")
                        .HasForeignKey("UserId");

                    b.HasOne("SriTel.Models.Payment", null)
                        .WithMany("Payment_user")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SriTel.Models.AddOnActivation", b =>
                {
                    b.Navigation("AddOnActivation_AddOn");

                    b.Navigation("AddOnActivation_Service");

                    b.Navigation("AddOnActivation_User");
                });

            modelBuilder.Entity("SriTel.Models.Bill", b =>
                {
                    b.Navigation("Bill_Service");

                    b.Navigation("Bill_User");
                });

            modelBuilder.Entity("SriTel.Models.DataService", b =>
                {
                    b.Navigation("DataService_Service");
                });

            modelBuilder.Entity("SriTel.Models.Notification", b =>
                {
                    b.Navigation("Notification_User");
                });

            modelBuilder.Entity("SriTel.Models.PackageUsage", b =>
                {
                    b.Navigation("PackageUsage_Service");

                    b.Navigation("PackageUsage_User");
                });

            modelBuilder.Entity("SriTel.Models.Payment", b =>
                {
                    b.Navigation("Payment_Bill");

                    b.Navigation("Payment_Service");

                    b.Navigation("Payment_user");
                });

            modelBuilder.Entity("SriTel.Models.VoiceService", b =>
                {
                    b.Navigation("VoiceService_Service");
                });
#pragma warning restore 612, 618
        }
    }
}
